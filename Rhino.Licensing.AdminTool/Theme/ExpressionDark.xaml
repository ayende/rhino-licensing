<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
    xmlns:Sys="clr-namespace:System;assembly=mscorlib"
    xmlns:ctrl="clr-namespace:Rhino.Licensing.AdminTool.Controls"
    xmlns:cnv="clr-namespace:Rhino.Licensing.AdminTool.ValueConverters">

    <cnv:BoolToVisibilityCollapsedConverter x:Key="DefaultBoolToVisibilityCollapsedConverter" />
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
    <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15" />

    <FontFamily x:Key="IconFontFamily">Tahoma</FontFamily>
    <FontWeight x:Key="IconFontWeight">Normal</FontWeight>
    <FontFamily x:Key="MessageFontFamily">Tahoma</FontFamily>
    <FontWeight x:Key="MessageFontWeight">Normal</FontWeight>
    <FontFamily x:Key="CaptionFontFamily">Tahoma</FontFamily>
    <FontWeight x:Key="CaptionFontWeight">Bold</FontWeight>

    <Geometry x:Key="Checkmark">M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z</Geometry>
    <Geometry x:Key="CheckBoxMark">F1 M 14.3268,1.30162L 14.6279,1.83659C 12.6725,3.25875 10.8611,5.05914 9.19373,7.23778C 7.5264,9.41643 6.32258,11.5502 5.58227,13.6391L 5.14196,13.9382C 4.76209,14.1907 4.4351,14.4444 4.16099,14.6991C 4.11351,14.451 3.98293,14.0523 3.76925,13.5029L 3.53938,12.9148C 3.0408,11.6455 2.61939,10.7583 2.27513,10.2532C 1.93087,9.74815 1.55909,9.47458 1.1598,9.43249C 1.69939,8.97394 2.16991,8.74467 2.57136,8.74467C 3.12606,8.74467 3.73364,9.4923 4.39409,10.9876L 4.75346,11.7917C 5.93408,9.61413 7.35967,7.60828 9.03024,5.7741C 10.7008,3.93992 12.4663,2.44909 14.3268,1.30162 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <Sys:Double x:Key="DefaultSpacing">4</Sys:Double>
    <Sys:Double x:Key="MediumSpacing">8</Sys:Double>
    <Sys:Double x:Key="LargeSpacing">12</Sys:Double>
    <Sys:Double x:Key="ExtraLargeSpacing">16</Sys:Double>
    <Sys:Double x:Key="IconFontSize">10</Sys:Double>
    <Sys:Double x:Key="CaptionFontSize">12</Sys:Double>
    <Sys:Double x:Key="MessageFontSize">11</Sys:Double>

    <Thickness x:Key="LargeMargin" Left="{StaticResource DefaultSpacing}" Top="{StaticResource MediumSpacing}" Right="{StaticResource LargeSpacing}" Bottom="{StaticResource ExtraLargeSpacing}" />
    <Thickness x:Key="DefaultLeftMargin" Left="{StaticResource DefaultSpacing}" Top="0" Right="0" Bottom="0" />

    <Color x:Key="MainWindowBackgroundColor">#FF333333</Color>
    <Color x:Key="MenuBackgroundColor">#FF3A3A3A</Color>
    <Color x:Key="DialogBackgroundColor">#FF666666</Color>
    <Color x:Key="PaletteColor">#FF595959</Color>
    <Color x:Key="Text1Color">#FFFFFFFF</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>
    <Color x:Key="ButtonDefaultBackgroundColor">#FF595959</Color>
    <Color x:Key="ButtonMouseOverBackgroundColor">#FFAAAAAA</Color>
    <Color x:Key="ButtonPressedBackgroundColor">#FF424242</Color>
    <Color x:Key="ButtonDisabledBackgroundColor">#FF666666</Color>
    <Color x:Key="ButtonDefaultTextColor">#FFFFFFFF</Color>
    <Color x:Key="ButtonMouseOverTextColor">#FF1A1A1A</Color>
    <Color x:Key="ButtonDisabledTextColor">#FF707070</Color>
    <Color x:Key="ButtonDefaultBorderColor">#FF333333</Color>
    <Color x:Key="ButtonMouseOverBorderColor">#FF424242</Color>
    <Color x:Key="ButtonPressedBorderColor">#FF1A1A1A</Color>
    <Color x:Key="ButtonIsDefaultBorderColor">#FF9BB1C5</Color>
    <Color x:Key="ButtonIsFocusedBorderColor">#FFE5E5E5</Color>
    <Color x:Key="ButtonDisabledBorderColor">#FF424242</Color>
    <Color x:Key="ButtonDefaultColor">#FF808080</Color>
    <Color x:Key="ButtonDefaultedColor">#FF9BB1C5</Color>
    <Color x:Key="ButtonOverColor">#FFAAAAAA</Color>
    <Color x:Key="ButtonSelectColor">#FFCCCCCC</Color>
    <Color x:Key="ButtonFocusedBorderColor">#FFE5E5E5</Color>
    <Color x:Key="ButtonSelectionColor">#FF999999</Color>
    <Color x:Key="ControlFocusBorderColor">#FFE5E5E5</Color>
    <Color x:Key="TitleGradStart">#FF616161</Color>
    <Color x:Key="TitleGradEnd">#FF444444</Color>
    <Color x:Key="BackgroundColor">#FF333333</Color>
    <Color x:Key="DisabledTextColor">#FF808080</Color>
    <Color x:Key="DarkColor">#FF1A1A1A</Color>
    <Color x:Key="RecessedColor">#FF424242</Color>
    <Color x:Key="PopUpColor">#FF666666</Color>
    <Color x:Key="ListSelectedTextColor">#FF333333</Color>
    <Color x:Key="ListBackgroundColor">#FFAAAAAA</Color>
    <Color x:Key="DarkBackgroundColor">#FF1A1A1A</Color>
    <Color x:Key="ListSelectionGradStartColor">#FF9A9A9A</Color>
    <Color x:Key="ListSelectionGradEndColor">#FFE3E3E3</Color>
    <Color x:Key="ToggleButtonDefaultBorderColor">#FF424242</Color>
    <Color x:Key="ToggleButtonFocusedBorderColor">#FFE5E5E5</Color>
    <Color x:Key="ToggleButtonDisabledTextColor">#FF424242</Color>
    <Color x:Key="LayerChild0Color">#FF383838</Color>
    <Color x:Key="LayerChild1Color">#FF5C5C5C</Color>
    <Color x:Key="LayerChild2Color">#FF707070</Color>
    <Color x:Key="SliderColor">#FF666666</Color>
    <Color x:Key="SliderGradStart">#FF424242</Color>
    <Color x:Key="SliderGradEnd">#FF4C4C4C</Color>
    <Color x:Key="TabSelectionColor">#808080</Color>
    <Color x:Key="MenuTextColor">#FFFFFFFF</Color>
    <Color x:Key="ControlBackgroundColor">#FF333333</Color>
    
    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="{StaticResource ControlBackgroundColor}" />
    <SolidColorBrush x:Key="MenuTextBrush" Color="{StaticResource MenuTextColor}" />
    <SolidColorBrush x:Key="TabSelectionBrush" Color="{StaticResource TabSelectionColor}" />
    <SolidColorBrush x:Key="LayerChild0Brush" Color="{StaticResource LayerChild0Color}" />
    <SolidColorBrush x:Key="LayerChild1Brush" Color="{StaticResource LayerChild1Color}" />
    <SolidColorBrush x:Key="LayerChild2Brush" Color="{StaticResource LayerChild2Color}" />
    <SolidColorBrush x:Key="ToggleButtonDisabledTextBrush" Color="{StaticResource ToggleButtonDisabledTextColor}" />
    <SolidColorBrush x:Key="ToggleButtonDefaultBorderBrush" Color="{StaticResource ToggleButtonDefaultBorderColor}" />
    <SolidColorBrush x:Key="ToggleButtonFocusedBorderBrush" Color="{StaticResource ToggleButtonFocusedBorderColor}" />
    <SolidColorBrush x:Key="ListBackgroundBrush" Color="{StaticResource ListBackgroundColor}" />
    <SolidColorBrush x:Key="ListSelectedTextBrush" Color="{StaticResource ListSelectedTextColor}" />
    <SolidColorBrush x:Key="PopUpBrush" Color="{StaticResource PopUpColor}" />
    <SolidColorBrush x:Key="RecessedBrush" Color="{StaticResource RecessedColor}" />
    <SolidColorBrush x:Key="DarkBrush" Color="{StaticResource DarkColor}" />
    <SolidColorBrush x:Key="DisabledTextBrush" Color="{StaticResource DisabledTextColor}" />
    <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource BackgroundColor}" />
    <SolidColorBrush x:Key="MenuBackgroundBrush" Color="{StaticResource MenuBackgroundColor}" />
    <SolidColorBrush x:Key="MainWindowBackgroundBrush" Color="{StaticResource MainWindowBackgroundColor}" />
    <SolidColorBrush x:Key="DialogBackgroundBrush" Color="{StaticResource DialogBackgroundColor}" />
    <SolidColorBrush x:Key="PaletteBrush" Color="{StaticResource PaletteColor}" />
    <SolidColorBrush x:Key="Text1Brush" Color="{StaticResource Text1Color}" />
    <SolidColorBrush x:Key="WhiteBrush" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="ControlFocusBorderBrush" Color="{StaticResource ControlFocusBorderColor}" />
    <SolidColorBrush x:Key="ButtonDefaultBackgroundBrush" Color="{StaticResource ButtonDefaultBackgroundColor}" />
    <SolidColorBrush x:Key="ButtonMouseOverBackgroundBrush" Color="{StaticResource ButtonMouseOverBackgroundColor}" />
    <SolidColorBrush x:Key="ButtonPressedBackgroundBrush" Color="{StaticResource ButtonPressedBackgroundColor}" />
    <SolidColorBrush x:Key="ButtonDisabledBackgroundBrush" Color="{StaticResource ButtonDisabledBackgroundColor}" />
    <SolidColorBrush x:Key="ButtonDefaultTextBrush" Color="{StaticResource ButtonDefaultTextColor}" />
    <SolidColorBrush x:Key="ButtonMouseOverTextBrush" Color="{StaticResource ButtonMouseOverTextColor}" />
    <SolidColorBrush x:Key="ButtonDisabledTextBrush" Color="{StaticResource ButtonDisabledTextColor}" />
    <SolidColorBrush x:Key="ButtonDefaultBorderBrush" Color="{StaticResource ButtonDefaultBorderColor}" />
    <SolidColorBrush x:Key="ButtonMouseOverBorderBrush" Color="{StaticResource ButtonMouseOverBorderColor}" />
    <SolidColorBrush x:Key="ButtonPressedBorderBrush" Color="{StaticResource ButtonPressedBorderColor}" />
    <SolidColorBrush x:Key="ButtonIsDefaultBorderBrush" Color="{StaticResource ButtonIsDefaultBorderColor}" />
    <SolidColorBrush x:Key="ButtonIsFocusedBorderBrush" Color="{StaticResource ButtonIsFocusedBorderColor}" />
    <SolidColorBrush x:Key="ButtonDisabledBorderBrush" Color="{StaticResource ButtonDisabledBorderColor}" />
    <SolidColorBrush x:Key="ButtonDefaultBrush" Color="{StaticResource ButtonDefaultColor}" />
    <SolidColorBrush x:Key="ButtonDefaultedBrush" Color="{StaticResource ButtonDefaultedColor}" />
    <SolidColorBrush x:Key="ButtonOverBrush" Color="{StaticResource ButtonOverColor}" />
    <SolidColorBrush x:Key="ButtonSelectBrush" Color="{StaticResource ButtonSelectColor}" />
    <SolidColorBrush x:Key="ButtonFocusedBorderBrush" Color="{StaticResource ButtonFocusedBorderColor}" />
    <SolidColorBrush x:Key="SliderBrush" Color="{StaticResource SliderColor}" />
    <SolidColorBrush x:Key="RedBrush" Color="Red" />

    <LinearGradientBrush x:Key="ButtonSelectionGrad" StartPoint="0,1" EndPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource ButtonSelectionColor}" Offset="0" />
            <GradientStop Color="{StaticResource ButtonOverColor}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="WindowTitleGrad" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource TitleGradStart}" Offset="0"/>
            <GradientStop Color="{StaticResource TitleGradStart}" Offset="0.49"/>
            <GradientStop Color="{StaticResource TitleGradEnd}" Offset="0.50"/>
            <GradientStop Color="{StaticResource TitleGradEnd}" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ListSelectionGrad" StartPoint="0,1" EndPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource ListSelectionGradStartColor}" Offset="0" />
            <GradientStop Color="{StaticResource ListSelectionGradEndColor}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="SliderGrad" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource SliderGradStart}" Offset="0" />
            <GradientStop Color="{StaticResource SliderGradEnd}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--Window Close Button-->
    <DrawingImage x:Key="CloseButton">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing Geometry="F1 M 1.98611,1.98611L 13.9861,13.9861">
                        <GeometryDrawing.Pen>
                            <Pen Thickness="3" LineJoin="Round" Brush="#FFFFFFFF"/>
                        </GeometryDrawing.Pen>
                    </GeometryDrawing>
                    <GeometryDrawing Geometry="F1 M 13.9861,1.98611L 1.98611,13.9861">
                        <GeometryDrawing.Pen>
                            <Pen Thickness="3" LineJoin="Round" Brush="#FFFFFFFF"/>
                        </GeometryDrawing.Pen>
                    </GeometryDrawing>
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <!--Close DrawingBrush-->
    <DrawingBrush x:Key="TestIcon">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Geometry="{StaticResource RightArrow}" />
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <!--Pane Expander Icon-->
    <DrawingImage x:Key="PaneExpanderIcon">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M 0,0L 8,4L 0,8L 0,0 Z " />
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <!--ComboBox Close Button-->
    <DrawingImage x:Key="ComboBoxButtonIcon">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Pen>
                    <Pen Brush="{DynamicResource Text1Brush}" Thickness="2" />
                </GeometryDrawing.Pen>
                <GeometryDrawing.Geometry>
                    <PathGeometry PresentationOptions:Freeze="true">
                        <PathGeometry.Figures>
                            <PathFigure>
                                <PathFigure.Segments>
                                    <PolyLineSegment>
                                        <PolyLineSegment.Points>
                                            <Point X="0" Y="0" />
                                            <Point X="4" Y="5" />
                                            <Point X="8" Y="0" />
                                        </PolyLineSegment.Points>
                                    </PolyLineSegment>
                                </PathFigure.Segments>
                            </PathFigure>
                        </PathGeometry.Figures>
                    </PathGeometry>
                </GeometryDrawing.Geometry>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <!--ListBox Item Focus Style-->
    <Style x:Key="ListItemFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" Margin="1" RadiusX="2" RadiusY="2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DialogTextBoxBase Focus Visual Style-->
    <Style x:Key="ComboBoxFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" RadiusX="4" RadiusY="4" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ButtonBase Focus Visual Style-->
    <Style x:Key="ButtonBaseFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" RadiusX="3" RadiusY="3" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CheckBox Focus Visual Style-->
    <Style x:Key="CheckBoxFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" Width="12" Height="12" HorizontalAlignment="Left" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--GroupBox-->
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#D5DFE5" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="4" Background="{DynamicResource LightBrush}" CornerRadius="4,4,4,4" BorderThickness="1,1,1,1" />
                        <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="4" BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource MainColor}" />
                                </Border.BorderBrush>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource MainColor}" />
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                        </Border>
                        <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" />
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="2" Background="{DynamicResource NormalBrush}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" x:Name="Main" BorderBrush="{DynamicResource NormalBorderBrush}" />
                        <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="3" RadiusY="3" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine" Grid.ColumnSpan="4" Grid.RowSpan="2" Margin="1,1,1,1">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                    <GradientStop Color="#26FFFFFF" Offset="0" />
                                    <GradientStop Color="#00FFFFFF" Offset="1" />
                                    <GradientStop Color="#26FFFFFF" Offset="0.467" />
                                    <GradientStop Color="#00FFFFFF" Offset="0.475" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>

                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True" Margin="0,4,0,4" />
                        </Border>

                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--Scrollbar Buttons-->
    <Style x:Key="ScrollButtons" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Background="Transparent">
                        <ContentPresenter Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Scrollbar Thumbs-->
    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                        <Rectangle Name="Rectangle1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="7" Height="Auto" RadiusX="4" RadiusY="4" Fill="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ButtonBase Template and Style-->
    <Style x:Key="{x:Type ButtonBase}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource ButtonDefaultBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonDefaultBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonDefaultTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="MinHeight" Value="18" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonBaseFocusVisualStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="ButtonTemplateGrid" Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="HighlightBackground" CornerRadius="2" RenderTransformOrigin="0.5,1" Grid.Row="0" Margin="1,1,1,0" Background="{DynamicResource ButtonSelectionGrad}" Opacity="0.15" />
                            <ContentPresenter x:Name="Content" Grid.RowSpan="2" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="true" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonMouseOverBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonMouseOverBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource ButtonMouseOverTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Value="{DynamicResource ButtonPressedBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonPressedBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.1" />
                            <Setter TargetName="HighlightBackground" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{DynamicResource ButtonDisabledBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonDisabledBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Repeat Button-->
    <Style x:Key="{x:Type RepeatButton}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonDefaultBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonDefaultBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonDefaultTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonBaseFocusVisualStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="ButtonTemplateGrid" Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="HighlightBackground" CornerRadius="2" RenderTransformOrigin="0.5,1" Grid.Row="0" Margin="1,1,1,0" Background="{DynamicResource ButtonSelectionGrad}" Opacity="0.15" />
                            <ContentPresenter x:Name="Content" Grid.RowSpan="2" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="true" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonMouseOverBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonMouseOverBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource ButtonMouseOverTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Value="{DynamicResource ButtonPressedBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonPressedBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.1" />
                            <Setter TargetName="HighlightBackground" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{DynamicResource ButtonDisabledBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonDisabledBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Buttons-->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonTemplateGrid" Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="HighlightBackground" CornerRadius="2" RenderTransformOrigin="0.5,1" Grid.Row="0" Margin="1,1,1,0" Background="{DynamicResource ButtonSelectionGrad}" Opacity="0.15" />
                            <ContentPresenter x:Name="Content" Grid.RowSpan="2" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="true" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonIsDefaultBorderBrush}" Property="BorderBrush" />
                            <Setter Property="BorderThickness" Value="1.5, 1.5, 1.5, 1.5" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Value="{DynamicResource ButtonSelectionGrad}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
                            <Setter Value="{DynamicResource ButtonIsFocusedBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonMouseOverBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonMouseOverBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource ButtonMouseOverTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Value="{DynamicResource ButtonPressedBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonPressedBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.1" />
                            <Setter TargetName="HighlightBackground" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{DynamicResource ButtonDisabledBackgroundBrush}" Property="Background" />
                            <Setter Value="{DynamicResource ButtonDisabledBorderBrush}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MessageBox Button-->
    <Style x:Key="MessageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="75" />
        <Setter Property="MinHeight" Value="20" />
    </Style>

    <!--Dialog Button-->
    <Style x:Key="FXDialogButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#E6E6E6" />
        <Setter Property="BorderBrush" Value="#CCCCCC" />
        <Setter Property="Foreground" Value="#595959" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="MinHeight" Value="18" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="ButtonTemplateGrid" Background="{TemplateBinding Background}" CornerRadius="4" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinWidth}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.593*" />
                                <RowDefinition Height="0.407*" />
                            </Grid.RowDefinitions>
                            <Border Name="HighlightBackground" CornerRadius="3" Grid.Row="0" Margin="1,1,1,1" Opacity="0.5" Background="#FFFFFF" />
                            <ContentPresenter Name="Content" Grid.RowSpan="2" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="true" Margin="{TemplateBinding Padding}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="#D9D9D9" />
                            <Setter Property="Foreground" Value="#333333" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="#A6A6A6" />
                            <Setter Value="{DynamicResource WhiteBrush}" Property="Foreground" />
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Grip Style-->
    <Style x:Key="DefaultGripStyle" TargetType="{x:Type Control}">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Cursor" Value="SizeNWSE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid Background="Transparent" Height="12" Width="12">
                        <Path Fill="{DynamicResource ButtonOverBrush}" Stretch="Fill" Margin="-0.5,-0.5,-0.5,-0.5" Data="" />
                        <Path Fill="{DynamicResource PopUpBrush}" Stretch="Fill" HorizontalAlignment="Right" Margin="0,0,1.5,1.5" VerticalAlignment="Bottom" Width="4" Height="4" Data="" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ResizeGrip}" BasedOn="{StaticResource DefaultGripStyle}" />

    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Width" Value="18"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <Border Name="HeaderBorder"
                                BorderThickness="0"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                Padding="2,0,2,0">
                            <ContentPresenter Name="HeaderContent"
                                              TextElement.Foreground="White"
                                              Margin="0,0,0,1"
                                              RecognizesAccessKey="True"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <Thumb x:Name="PART_HeaderGripper"
                               HorizontalAlignment="Right"
                               Margin="0,0,-9,0"
                               Style="{StaticResource GridViewColumnHeaderGripper}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}">
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    </Style>
    
    <Style x:Key="{x:Type ListViewItem}" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="4,2,4,2" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ListItemFocusVisualStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="ListViewItemRoot" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <GridViewRowPresenter Name="ListViewItemContent" 
                                              Content="{TemplateBinding Content}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsSelected" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource ButtonOverBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource ListSelectionGrad}" />
                <Setter Property="Foreground" Value="{DynamicResource ListSelectedTextBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--ListBox Item-->
    <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="Padding" Value="4,2,4,2" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ListItemFocusVisualStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="ListBoxItemRoot" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter Name="ListBoxItemContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsSelected" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource ButtonOverBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource ListSelectionGrad}" />
                <Setter Property="Foreground" Value="{DynamicResource ListSelectedTextBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--ListBox Style-->
    <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource DarkBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer CanContentScroll="true" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollBars-->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrush}}" />
        <Setter Property="Background" Value="{DynamicResource SliderGrad}" />
        <Setter Property="Width" Value="12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidth}}" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="DecreaseRepeat" Command="ScrollBar.LineUpCommand" Style="{DynamicResource ScrollButtons}" Foreground="{DynamicResource ButtonDefaultBrush}">
                            <Path x:Name="DecreaseArrow" Data="F1 M 3.5,0L 0,7L 7,7L 3.5,0 Z " HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding ElementName=DecreaseRepeat, Path=Foreground}" />
                        </RepeatButton>
                        <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{DynamicResource ButtonDefaultBrush}" Style="{DynamicResource ScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton x:Name="IncreaseRepeat" Grid.Row="2" Command="ScrollBar.LineDownCommand" Style="{DynamicResource ScrollButtons}">
                            <Path x:Name="IncreaseArrow" Data="F1 M 3.5,7L 7,0L 0,0L 3.5,7 Z " Fill="{DynamicResource ButtonDefaultBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </RepeatButton>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="IncreaseRepeat" Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="IncreaseArrow" Property="Fill" />
                        </Trigger>
                        <Trigger SourceName="DecreaseRepeat" Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="DecreaseArrow" Property="Fill" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                        </Trigger>
                        <Trigger SourceName="IncreaseRepeat" Property="IsPressed" Value="true">
                            <Setter Value="{DynamicResource DarkBrush}" TargetName="IncreaseArrow" Property="Fill" />
                        </Trigger>
                        <Trigger SourceName="DecreaseRepeat" Property="IsPressed" Value="true">
                            <Setter Value="{DynamicResource DarkBrush}" TargetName="DecreaseArrow" Property="Fill" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{DynamicResource LayerChild1Brush}" TargetName="IncreaseArrow" Property="Fill" />
                            <Setter Value="{DynamicResource LayerChild1Brush}" TargetName="DecreaseArrow" Property="Fill" />
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="12" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
                            <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollViewer-->
    <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="{TemplateBinding Background}" BorderThickness="2">
                        <Grid Name="Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Name="ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />
                            <ScrollBar Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            <ScrollBar Name="PART_VerticalScrollBar" Margin="1,0,0,0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Round ScrollViewer-->
    <Style x:Key="RoundedScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="{TemplateBinding Background}" BorderThickness="2">
                        <Grid Name="Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Name="ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />
                            <ScrollBar Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            <ScrollBar Name="PART_VerticalScrollBar" Margin="1,0,0,0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Base TextBox-->
    <Style x:Key="BaseTextBox" TargetType="{x:Type TextBoxBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonBaseFocusVisualStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Focusable="false" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
                        <ScrollViewer Name="PART_ContentHost" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{DynamicResource DarkBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Localization.Attributes="Value(Readable Modifiable None)" Property="Foreground" Value="{DynamicResource Text1Brush}" />
                <Setter Localization.Attributes="Value(Readable Modifiable None)" Property="Background" Value="{DynamicResource BackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TextBox-->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextBox}" />

    <!--ComboBox Item-->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="Padding" Value="4,2,4,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="ListBoxItemRoot" CornerRadius="2" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Content}" TextElement.Foreground="{TemplateBinding Foreground}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsSelected" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource ButtonOverBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource ListSelectionGrad}" />
                <Setter Property="Foreground" Value="{DynamicResource ListSelectedTextBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--ComboBox Button-->
    <Style x:Key="ComboBoxButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="BorderBrush" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                        </Grid.ColumnDefinitions>
                        <Border Name="ComboBoxButtonBorder" Grid.Column="1" Width="16" CornerRadius="2" Background="{DynamicResource ButtonDefaultBrush}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Image Name="ComboBoxButtonArrow" Stretch="Fill" Width="8" Height="5" Source="{DynamicResource ComboBoxButtonIcon}" />
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource Text1Brush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource ButtonOverBrush}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource DarkBrush}" Property="BorderBrush" />
                            <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource RecessedBrush}" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBox-->
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="MinWidth" Value="40" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonBaseFocusVisualStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Border Background="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" CornerRadius="4" Name="PART_MainBorder">
                            <Grid IsSharedSizeScope="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                                </Grid.ColumnDefinitions>
                                <Border Name="SelectedItemBorder" Grid.ColumnSpan="2" Margin="1" CornerRadius="2" Background="{TemplateBinding Background}" />
                                <ContentPresenter Name="ContentSite" Grid.Column="1" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="4,2,1,2" VerticalAlignment="Center" TextElement.Foreground="{TemplateBinding Foreground}"/>
                                <TextBox Name="PART_EditableTextBox" MinHeight="0" Height="Auto" Grid.Column="1" Visibility="Collapsed" Padding="1,0,0,0" IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{DynamicResource ComboBoxFocusVisualStyle}" />
                                <ToggleButton Name="DropDownButton" Focusable="false" Margin="0" Grid.Column="0" Grid.ColumnSpan="3" Style="{StaticResource ComboBoxButtonStyle}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </Border>
                        <ctrl:FXPopup x:Name="PART_Popup" Placement="Bottom" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <Border x:Name="DropDownBorder" Background="{DynamicResource BackgroundBrush}" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" Margin="1" />
                                </ScrollViewer>
                            </Border>
                        </ctrl:FXPopup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="true" />
                                <Condition Property="IsDropDownOpen" Value="false" />
                                <Condition Property="IsEditable" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditableTextBox" Value="{DynamicResource Text1Brush}" Property="Foreground" />
                            <Setter TargetName="ContentSite" Value="{DynamicResource Text1Brush}" Property="TextElement.Foreground" />
                        </MultiTrigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter TargetName="SelectedItemBorder" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="PART_MainBorder" Value="{DynamicResource RecessedBrush}" />
                            <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="DropDownButton"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                    <Condition Property="IsEditable" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
            </MultiTrigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Label-->
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Dialog Text-->
    <Style x:Key="DialogText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="None" />
        <Setter Property="Foreground" Value="#FFFFFFFF" />
    </Style>

    <!--Dialog HyperLink-->
    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#FF808080" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="FontFamily" Value="{DynamicResource IconFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource IconFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource IconFontWeight}" />
        <Setter Property="Foreground" Value="#3399FF" />
    </Style>

    <!--Radio Button-->
    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource PopUpBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="Padding" Value="4,0,0,0" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Width="12" Height="12" Margin="0,4,0,0" VerticalAlignment="Top">
                            <Ellipse Name="Ellipse_Border" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            <Ellipse Name="CheckMark" Fill="Black" Width="6" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                        <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="true" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource Text1Brush}" TargetName="Ellipse_Border" Property="Stroke" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource RecessedBrush}" />
                            <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CheckBox Style-->
    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="Background" Value="{DynamicResource PopUpBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonDefaultBorderBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="Padding" Value="4,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisualStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="Transparent" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border Width="12" Height="12" VerticalAlignment="Center" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <Path Name="CheckMark" Fill="{DynamicResource Text1Brush}" Stretch="Fill" Margin="0,0,0,0" Data="{StaticResource Checkmark}" Visibility="Collapsed" Width="8" Height="8" />
                        </Border>
                        <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ToggleButtonFocusedBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Expander Toggle Button-->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="CheckBox">
        <DockPanel LastChildFill="True" SnapsToDevicePixels="True">
            <Image Name="Arrow" DockPanel.Dock="Right" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="4" Height="8" Width="8" Source="{DynamicResource PaneExpanderIcon}" />
            <ContentPresenter Name="ContentHeader" Focusable="false" Margin="4,4,4,4" RecognizesAccessKey="true" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="FlowDirection" Value="RightToLeft" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform CenterX="4" CenterY="4" Angle="270" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="FlowDirection" Value="RightToLeft" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform CenterX="4" CenterY="4" Angle="180" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="FlowDirection" Value="LeftToRight" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform CenterX="4" CenterY="4" Angle="90" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Value="{DynamicResource WhiteBrush}" Property="Foreground" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--Expander-->
    <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{DynamicResource ButtonDefaultBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PaletteBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid SnapsToDevicePixels="True" Height="{TemplateBinding Height}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Name="ContentRow" Height="0" />
                        </Grid.RowDefinitions>
                        <Border Name="HeaderBorder" Grid.Row="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="4">
                            <CheckBox Name="HeaderSite" Focusable="false" Margin="4,0,0,0" Background="{DynamicResource Text1Brush}" OverridesDefaultStyle="true" Template="{StaticResource ExpanderToggleButton}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding Header}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Border>
                        <Border Name="Content" Grid.Row="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0,0,4,4" BorderThickness="1,0,1,1">
                            <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=Height}" />
                            <Setter TargetName="HeaderBorder" Property="CornerRadius" Value="4,4,0,0" />
                            <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TabItem Base-->
    <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border SnapsToDevicePixels="True" Name="Border" Margin="0,0,2,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" CornerRadius="3,3,0,0" Height="{TemplateBinding Height}">
                        <ContentPresenter Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,0,5,0" VerticalAlignment="Center" RecognizesAccessKey="true" ContentSource="Header" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="Border" Property="CornerRadius" Value="0,0,3,3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource TabSelectionBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsSelected" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource ButtonOverBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource PaletteBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Tab Control-->
    <Style x:Key="BaseTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="ClipToBounds" Value="true" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource ButtonDefaultBrush}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid Name="Grid1" KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="ColumnDefinition0" />
                            <ColumnDefinition Name="ColumnDefinition1" Width="0px" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Name="RowDefinition0" Height="Auto" />
                            <RowDefinition Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel Name="HeaderPanel" Background="Transparent" KeyboardNavigation.TabIndex="1" Grid.Column="0" Grid.Row="0" IsItemsHost="true" />
                        <Border Name="ContentPanel" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" Grid.Column="0" Grid.Row="1" CornerRadius="0,0,3,3">
                            <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentTemplateSelector="{TemplateBinding SelectedContentTemplateSelector}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="BorderThickness" Value="0,0,0,1" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="BorderThickness" Value="0,0,1,0" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TabControl Style-->
    <Style x:Key="{x:Type TabControl}" BasedOn="{StaticResource BaseTabControl}" TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid Name="Grid1" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="0px" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Name="RowDefinition0" Height="Auto" />
                            <RowDefinition Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <UniformGrid Name="HeaderPanel" Background="Transparent" KeyboardNavigation.TabIndex="1" Grid.Column="0" Grid.Row="0" IsItemsHost="true" Rows="1" Margin="0,0,-2,0" />
                        <Border Name="ContentPanel" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" Grid.Column="0" Grid.Row="1" CornerRadius="0,0,3,3">
                            <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentTemplateSelector="{TemplateBinding SelectedContentTemplateSelector}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="BorderThickness" Value="0,0,0,1" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Auto Hidden Tab Control-->
    <Style x:Key="BaseAutoHiddenTabControl" TargetType="{x:Type TabControl}" BasedOn="{StaticResource BaseTabControl}">
        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--StatusBar Separator-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Menu Separator-->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border SnapsToDevicePixels="true" Background="{DynamicResource MenuTextBrush}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ContextMenu-->
    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Height="Auto" Background="{DynamicResource MenuBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource MenuTextBrush}">
                        <StackPanel Background="{TemplateBinding Background}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Menu-->
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border Margin="1" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <StackPanel Background="{TemplateBinding Background}" IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Menu Items-->
    <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="SubmenuHeaderStyle">
        <Border Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Name="Grid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                    <ColumnDefinition Width="14" />
                </Grid.ColumnDefinitions>
                <Path x:Name="GlyphPanel" Visibility="Hidden" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{StaticResource Checkmark}" />
                <ContentPresenter x:Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
                <Path x:Name="Path" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Grid.Column="3" DockPanel.Dock="Right" Data="{StaticResource RightArrow}" />
                <ctrl:FXPopup x:Name="PART_Popup" Placement="Right" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimation}}" VerticalOffset="-3" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent , AncestorType={x:Null}}}">
                    <Border x:Name="SubMenuBorder" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource MenuTextBrush}" Background="{DynamicResource MenuBackgroundBrush}">
                        <ScrollViewer x:Name="ScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <ItemsPresenter x:Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,2,2,2" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true" />
                        </ScrollViewer>
                    </Border>
                </ctrl:FXPopup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
                <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="MenuItemTopLevelItemStyle">
        <Border Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel Name="DockPanel">
                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
                <Path Name="GlyphPanel" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" />
                <ContentPresenter Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
                <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="MenuItemTopLevelHeaderStyle">
        <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel x:Name="DockPanel">
                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
                <Path x:Name="GlyphPanel" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" />
                <ContentPresenter x:Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
                <ctrl:FXPopup x:Name="PART_Popup" Placement="Bottom" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimation}}" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent , AncestorType={x:Null}}}">
                    <Border x:Name="SubMenuBorder" Background="{DynamicResource MenuBackgroundBrush}" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource MenuTextBrush}">
                        <ScrollViewer x:Name="ScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                            <ItemsPresenter x:Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,2,2,2" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true" />
                        </ScrollViewer>
                    </Border>
                </ctrl:FXPopup>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
                <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor , AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor , AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
        <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
                            <Path x:Name="GlyphPanel" Visibility="Hidden" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" />
                            <ContentPresenter x:Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
                            <TextBlock x:Name="InputGestureText" Margin="5,2,0,2" Grid.Column="2" DockPanel.Dock="Right" Text="{TemplateBinding InputGestureText}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
                            <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0,1,0,1" />
                <Setter Property="Padding" Value="6,3,6,3" />
                <Setter Property="Template" Value="{DynamicResource MenuItemTopLevelHeaderStyle}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0,1,0,1" />
                <Setter Property="Padding" Value="6,3,6,3" />
                <Setter Property="Template" Value="{DynamicResource MenuItemTopLevelItemStyle}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top" />
                <Setter Property="Padding" Value="0,2,0,2" />
                <Setter Property="Template" Value="{DynamicResource SubmenuHeaderStyle}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top" />
                <Setter Property="Padding" Value="0,2,0,2" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--StatusBar-->
    <Style TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    </Style>
    
    <!--StatusBarItem-->
    <Style TargetType="{x:Type StatusBarItem}">
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    </Style>

    <!--ToolTip-->
    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border BorderBrush="{DynamicResource Text1Brush}" x:Name="Bd" BorderThickness="1" Background="{DynamicResource PopUpBrush}">
                        <ContentPresenter Margin="4,2,4,2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Dialog Container-->
    <Style x:Key="DialogRootContainer" TargetType="{x:Type Border}">
        <Style.Resources>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisualStyle}" />
            </Style>

            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="FocusVisualStyle" Value="{DynamicResource ComboBoxFocusVisualStyle}" />
            </Style>

        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource DialogBackgroundBrush}" />
        <Setter Property="Padding" Value="{DynamicResource LargeMargin}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Text1Brush}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource ButtonTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="MinHeight" Value="18"/>
        <Setter Property="MinWidth" Value="50"/>
    </Style>

    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource CheckBoxTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource RadioButtonTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TopGradientSelectColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template" Value="{DynamicResource TextBoxTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="#FF000000"/>
    </Style>

</ResourceDictionary>